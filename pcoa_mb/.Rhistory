runApp('App')
pcoa_labs <- read.table('./NP0452-MB6_Nephele_Labels_10000.txt',header=TRUE)
library(car)
library(rgl)
library("RColorBrewer")
pcoa_full <- read.table('./pcoa_weighted_unifrac_rarefaction_10000_0.txt')
pc1 <- pcoa_full$V2
pc2 <- pcoa_full$V3
pc3 <- pcoa_full$V4
pcoa_labs <- read.table('./NP0452-MB6_Nephele_Labels_10000.txt',header=TRUE)
names <- unique(pcoa_labs$V3)
palette(c(brewer.pal(n=12, name = "Set3"),brewer.pal(n=12, name = "Paired"),brewer.pal(n=11, name = "Spectral")))
scatter3d(x=pc1, y=pc2, z=pc3, surface=FALSE, groups = pcoa_labs$V3, pch=5, surface.col = palette(), cex=5,
labels = pcoa_labs$V3, id.n=nrow(pcoa_labs),
axis.col = c("white", "white", "white"), bg="black")
scatter3d(x=pc1, y=pc2, z=pc3, surface=FALSE, groups = pcoa_labs$V3, pch=5, surface.col = palette(), cex=5,
labels = pcoa_labs$V3, id.n=nrow(pcoa_labs),
axis.col = c("white", "white", "white"), bg="black")
library(car)
library(rgl)
library("RColorBrewer")
pcoa_full <- read.table('./pcoa_weighted_unifrac_rarefaction_10000_0.txt')
pc1 <- pcoa_full$V2
pc2 <- pcoa_full$V3
pc3 <- pcoa_full$V4
pcoa_labs <- read.table('./NP0452-MB6_Nephele_Labels_10000.txt',header=TRUE)
names <- unique(pcoa_labs$V3)
palette(c(brewer.pal(n=12, name = "Set3"),brewer.pal(n=12, name = "Paired"),brewer.pal(n=11, name = "Spectral")))
scatter3d(x=pc1, y=pc2, z=pc3, surface=FALSE, groups = pcoa_labs$V3, pch=5, surface.col = palette(), cex=5,
labels = pcoa_labs$V3, id.n=nrow(pcoa_labs),
axis.col = c("white", "white", "white"), bg="black")
header(pcoa_labs)
names(pcoa_labs)
pcoa_labs <- read.table('./NP0452-MB6_Nephele_Labels_10000.txt',header=TRUE)
pcoa_labs <- read.table('./NP0452-MB6_Nephele_Labels_10000.txt',header=TRUE)
names <- unique(pcoa_labs$V3)
names
pcoa_labs <- read.table('./NP0452-MB6_Nephele_Labels_10000.txt')
names <- unique(pcoa_labs$V3)
pcoa_labs
pcoa_labs <- read.table('./NP0452-MB6_Nephele_Labels_10000.txt',header=TRUE)
pcoa_labs <- read.table('./NP0452-MB6_Nephele_Labels_10000.txt',header=TRUE)
pcoa_labs
names <- unique(pcoa_labs$TreatmentGroup)
names(pcoa_labs)
grouping <- pcoa_labs$TreatmentGroup
scatter3d(x=pc1, y=pc2, z=pc3, surface=FALSE, groups = grouping, pch=5, surface.col = palette(), cex=5,
axis.col = c("white", "white", "white"), bg="black")
legend("left",title="Color Legend", legend=unique(pcoa_labs$V3),col=palette(),pch=16, cex=1.5)
plot.new()
legend("left",title="Color Legend", legend=unique(pcoa_labs$V3),col=palette(),pch=16, cex=1.5)
legend("left",title="Color Legend", legend=unique(grouping),col=palette(),pch=16, cex=1.5)
unilabs <- unique(grouping)
abcleg <- sort(unilabs)
legend("left",title="Color Legend", legend=abcleg,col=palette(),pch=16, cex=1.5)
shiny::runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
pcoa_full <- read.table('./pcoa_weighted_unifrac_rarefaction_10000_0.txt')
pc1 <- pcoa_full$V2
pc2 <- pcoa_full$V3
pc3 <- pcoa_full$V4
pcoa_labs <- read.table('./NP0452-MB6_Nephele_Labels_10000.txt',header=TRUE, colClasses = "factor")
palette(c(brewer.pal(n=12, name = "Set3"),brewer.pal(n=12, name = "Paired"),brewer.pal(n=11, name = "Spectral")))
grouping <- pcoa_labs$TreatmentGroup
scatter3d(x=pc1, y=pc2, z=pc3, surface=FALSE, groups = grouping, pch=5, surface.col = palette(), cex=5,
axis.col = c("white", "white", "white"), bg="black")
scatter3d(x=pc1, y=pc2, z=pc3, surface=FALSE, groups = grouping, pch=5, surface.col = palette(), cex=5,
axis.col = c("white", "white", "white"), bg="black")
group_select = pcoa_labs$TreatementGroups
plot.new()
legend("left",title="Color Legend", legend=group_select,col=palette(),pch=16, cex=1.5)
plot.new()
legend("left",title="Color Legend", legend=group_select,col=palette(),pch=16, cex=1.5)
group_select = pcoa_labs$TreatementGroups
group_select = pcoa_labs$TreatementGroup
pcoa_labs <- read.table('./NP0452-MB6_Nephele_Labels_10000.txt',header=TRUE, colClasses = "factor")
palette(c(brewer.pal(n=12, name = "Set3"),brewer.pal(n=12, name = "Paired"),brewer.pal(n=11, name = "Spectral")))
grouping <- pcoa_labs$TreatmentGroup
grouping
unilabs <- sort(unique(group_select))
group_select = pcoa_labs$TreatmentGroups
unilabs <- sort(unique(group_select))
group_select = pcoa_labs$TreatmentGroup
unilabs <- sort(unique(group_select))
plot.new()
legend("topleft",title="Color Legend",legend=unilabs,col=palette(),pch=16, cex=1.5)
library(car)
library(rgl)
library("RColorBrewer")
pcoa_full <- read.table('./pcoa_weighted_unifrac_rarefaction_10000_0.txt')
pc1 <- pcoa_full$V2
pc2 <- pcoa_full$V3
pc3 <- pcoa_full$V4
pcoa_labs <- read.table('./NP0452-MB6_Nephele_Labels_10000.txt',header=TRUE, colClasses = "factor")
palette(c(brewer.pal(n=12, name = "Set3"),brewer.pal(n=12, name = "Paired"),brewer.pal(n=11, name = "Spectral")))
group_select = pcoa_labs$TreatmentGroup
unilabs <- sort(unique(group_select))
scatter3d(x=pc1, y=pc2, z=pc3, surface=FALSE, groups = group_select, pch=5, surface.col = palette(), cex=5,
axis.col = c("white", "white", "white"), bg="black")
plot.new()
legend("topleft",title="Color Legend",legend=unilabs,col=palette(),pch=16, cex=1.5)
group_select = pcoa_labs$Lot_Primer
unilabs <- sort(unique(group_select))
scatter3d(x=pc1, y=pc2, z=pc3, surface=FALSE, groups = group_select, pch=5, surface.col = palette(), cex=5,
axis.col = c("white", "white", "white"), bg="black")
plot.new()
legend("topleft",title="Color Legend",legend=unilabs,col=palette(),pch=16, cex=1.5)
scatter3d(x=pc1, y=pc2, z=pc3, surface=FALSE, groups = group_select, pch=5, surface.col = palette(), cex=5,
axis.col = c("white", "white", "white"), bg="black")
group_select = as.factor(pcoa_labs$Lot_Primer)
unilabs <- sort(unique(group_select))
scatter3d(x=pc1, y=pc2, z=pc3, surface=FALSE, groups = group_select, pch=5, surface.col = palette(), cex=5,
axis.col = c("white", "white", "white"), bg="black")
plot.new()
legend("topleft",title="Color Legend",legend=unilabs,col=palette(),pch=16, cex=1.5)
runApp('App')
runApp('App')
names(pcoa_labs)
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
install.packages("seqinr")
myseqs <- read.alignment(file = system.file("sequences/test.mase",
package = "seqinr"), format = "mase")
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = system.file("sequences/test.mase",
package = "seqinr"), format = "mase")
load.packages("seqinr")
seqinr
library(seqinr)
myseqs <- read.alignment(file = system.file("sequences/test.mase",
package = "seqinr"), format = "mase")
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = system.file("C:\Users\sevillas2\Google Drive\My Documents\Education\George Mason University\BINF730\Midterm",
package = "seqinr"), format = "mase")
myseqs <- read.alignment(file = system.file("Users/sevillas2/Google Drive/My Documents/Education/George Mason University/BINF730/Midterm",
package = "seqinr"), format = "mase")
myseqs <- read.alignment(file = system.file("Users/sevillas2/Google Drive/My Documents/Education/George Mason University/BINF730/Midterm/codes.txt",
package = "seqinr"), format = "mase")
myseqs <- read.alignment(file = system.file("Users/sevillas2/Google Drive/My Documents/Education/George Mason University/BINF730/Midterm/Codes.txt",
package = "seqinr"), format = "mase")
myseqs <- read.alignment(file = system.file("./Users/sevillas2/Google Drive/My Documents/Education/George Mason University/BINF730/Midterm/Codes.txt",
package = "seqinr"), format = "mase")
myseqs <- read.alignment(file = "./Users/sevillas2/Google Drive/My Documents/Education/George Mason University/BINF730/Midterm/Codes.txt",
format = "mase")
pwd
pwd()
dir()
myseqs <- read.fasta("./sevillas/Desktop/Codes.txt")
myseqs <- read.fasta("./users/sevillas/Desktop/Codes.txt")
chdir("./Users")
dir("./Users")
pwd
dir()
myseqs <- read.fasta(".Codes.txt")
myseqs <- read.fasta("Codes.txt")
dist.alignment(myseqs, matrix = "identity" )
myseqs <- read.alignment(read.fasta("Codes.txt"))
myseqs <- read.alignment(file = system.file("code.txt",
package = "seqinr"), format = "fasta)
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = system.file("codes.txt",
package = "seqinr"), format = "fasta)
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = system.file("codes.fasta",
package = "seqinr"), format = "fasta)
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = "codes.fasta",
package = "seqinr"), format = "fasta)
myseqs <- read.alignment(file = "codes.fasta", format = "fasta)
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = "codes.fasta", format = "fasta)
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = "./codes.fasta", format = "fasta)
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = ("./codes.fasta", package="seqinr"), format = "fasta)
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = ("./codes.fasta", package="seqinr"), format = "fasta)
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = system.file("./codes.fasta", package="seqinr"), format = "fasta)
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = system.file("./codes.fasta", package="seqinr"), format = "fasta)
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = system.file("sequences/test.mase",
package = "seqinr"), format = "mase")
library(seqinr)
myseqs <- read.alignment(file = system.file("sequences/test.mase",
package = "seqinr"), format = "mase")
myseqs <- read.alignment(file = system.file("./codes.fasta", package="seqinr"), format = "fasta)
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = system.file("./codes.fasta", package="seqinr"), format = "fasta")
myseqs <- read.alignment(file = system.file("Codes.fasta", package="seqinr"), format = "fasta")
myseqs <- read.alignment(file = system.file("./Codes.fasta", package="seqinr"), format = "fasta")
myseqs <- read.alignment(file = ("./Codes.fasta", package="seqinr"), format = "fasta")
myseqs <- read.alignment(file = "./Codes.fasta", format = "fasta")
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = "./Gene_EGFR_Seq.txt", format = "fasta")
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = "./Gene_EGFR_Seq.txt", format = "fasta")
dist.alignment(myseqs, matrix = "identity" )
myseqs <- read.alignment(file = "./Gene_ALB_Seq.txt", format = "fasta")
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = "./Gene_EGFR_Seq.txt", format = "fasta")
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = "./Gene_EGFR_Seq.txt", format = "fasta")
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = "./Gene_ALB_Seq.txt", format = "fasta")
dist.alignment(myseqs, matrix = "identity" )
myseqs <- read.alignment(file = "./Gene_ALB_Seq.txt", format = "fasta")
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = "./Gene_EFGR_Seq.txt", format = "fasta")
myseqs <- read.alignment(file = "./Gene_EGRR_Seq.txt", format = "fasta")
myseqs <- read.alignment(file = "./Gene_EGFR_Seq.txt", format = "fasta")
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
myseqs <- read.alignment(file = "./Gene_EGFR_Seq.txt", format = "fasta")
myseqs <- read.alignment(file = "./Gene_EGFR_Seq.txt", format = "fasta")
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
pcoa_full <- read.table('./pcoa_weighted_unifrac_rarefaction_10000_0.txt')
col(pcoa_full)
head(pcoa_full)
pcoa_full <- read.table('./pcoa_weighted_unifrac_rarefaction_1300_0.txt')
head(pcoa_full)
pcoa_full <- read.table('./pcoa_weighted_unifrac_rarefaction_1300_0.txt', header=TRUE)
head(pcoa_full)
pcoa_full <- read.table('./pcoa_weighted_unifrac_rarefaction_1300_0.txt', col.names = [1,]);
pcoa_full <- read.table('./pcoa_weighted_unifrac_rarefaction_1300_0.txt', col.names = [1,])
colname(pcoa_full) = pcoa_full[1,]
pcoa_full <- read.table('./pcoa_weighted_unifrac_rarefaction_1300_0.txt')
colname(pcoa_full) = pcoa_full[1,]
colnames(pcoa_full) = pcoa_full[1,]
header(pcoa_full)
head(pcao_full)
head(pcoa_full)
colnames(pcoa_full)
pcoa_labels <- read.table('./NP0440-MB3_Nephele_Labels_1300.txt')
colnames(pcoa_labels) = pcoa_labels[1,]
colnames(pcoa_full)
colnames(pcoa_labels)
pcoa_labels
pcoa_labels <- read.table('./NP0440-MB3_Nephele_Labels_1300.txt')
pcoa_labels
pcoa_labels=pcoa_labels[-1,]
colnames(pcoa_labels)
pcoa_labels <- read.table('./NP0440-MB3_Nephele_Labels_1300.txt')
colnames(pcoa_labels) = pcoa_labels[1,]
pcoa_labels=pcoa_labels[-1,]
colnames(pcoa_labels)
pcoa_labels <- read.table('./NP0440-MB3_Nephele_Labels_1300.txt', header=T)
colnames(pcoa_labels)
pcoa_labels
colheaders <- colnames(pcoa_labels)
colheaders
colheaders(1)
colheaders[1]
colheaders[2]
shiny::runApp('App')
runApp('App')
runApp('App')
shinyApp(ui, server)
ui <- fluidPage(
selectInput("dataset", "Dataset", c("diamonds", "rock", "pressure", "cars")),
conditionalPanel( condition = "output.nrows",
checkboxInput("headonly", "Only use first 1000 rows"))
)
server <- function(input, output, session) {
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
output$nrows <- reactive({
nrow(datasetInput())
})
outputOptions(output, "nrows", suspendWhenHidden = FALSE)
}
shinyApp(ui, server)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
shiny::runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
print cols
print(cols)
data_labels
data_labs
colheaders
poca_full
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
shiny::runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
head(data_labels)
pcoa_full <- read.table('./pcoa_weighted_unifrac_rarefaction_10000_0.txt')
pcoa_labs <- read.table('./NP0452-MB6_Nephele_Labels_10000.txt',header=TRUE, colClasses = "factor")
head(pcoa_labs)
pcoa_labs[,1]
colnames(pcoa_labs)
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
temp <- pcoa_labs(,1)
temp <- pcoa_labs[,1
]
temp
temp <- data_labels[1,]
temp <- pcoa_labels[1,]
temp<- pcoa_labs[1,]
temp
temp <- head(pcoa_labs)
temp
temp <- colnames(pcoa_labs)
temp
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
